from . import prompts
from .prompts import list #, confirm, input, password, checkbox, rawlist, expand, editor


def prompt(questions, answers=None, **kwargs):
    if isinstance(questions, dict):
        questions = [questions]
    answers = answers or {}

    # patch_stdout = kwargs.pop('patch_stdout', False)
    # return_asyncio_coroutine = kwargs.pop('return_asyncio_coroutine', False)
    # true_color = kwargs.pop('true_color', False)
    # refresh_interval = kwargs.pop('refresh_interval', 0)
    # eventloop = kwargs.pop('eventloop', None)
    # kbi_msg = kwargs.pop('keyboard_interrupt_msg', 'Cancelled by user')
    # raise_kbi = kwargs.pop('raise_keyboard_interrupt', False)

    for question in questions:
        # import the question
        if 'type' not in question:
            raise ValueError('you must provide a type parameter')
        if 'name' not in question:
            raise ValueError('you must provide a name parameter')
        if 'message' not in question:
            raise ValueError('you must provide a message parameter')
        try:
            choices = question.get('choices')
            if choices is not None and callable(choices):
                question['choices'] = choices(answers)

            _kwargs = {}
            _kwargs.update(kwargs)
            _kwargs.update(question)
            question_type = _kwargs.pop('type')
            name = _kwargs.pop('name')
            message = _kwargs.pop('message')
            when = _kwargs.pop('when', None)
            question_filter = _kwargs.pop('filter', None)

            if when:
                # at least a little sanity check!
                if callable(question['when']):
                    try:
                        if not question['when'](answers):
                            continue
                    except Exception as e:
                        raise ValueError(
                            'Problem in \'when\' check of %s question: %s' %
                            (name, e))
                else:
                    raise ValueError('\'when\' needs to be function that accepts a dict argument')
            if question_filter:
                # at least a little sanity check!
                if not callable(question['filter']):
                    raise ValueError('\'filter\' needs to be function that accepts an argument')

            if callable(question.get('default')):
                _kwargs['default'] = question['default'](answers)

            application = getattr(prompts, question_type).question(message, **_kwargs)
            answer = application.run()

            # answer = run_application(
            #     application,
            #     patch_stdout=patch_stdout,
            #     return_asyncio_coroutine=return_asyncio_coroutine,
            #     true_color=true_color,
            #     refresh_interval=refresh_interval,
            #     eventloop=eventloop)

            if answer is not None:
                if question_filter:
                    try:
                        answer = question['filter'](answer)
                    except Exception as e:
                        raise ValueError(
                            'Problem processing \'filter\' of %s question: %s' %
                            (name, e))
                answers[name] = answer
        except AttributeError as e:
            print(e)
            raise ValueError('No question type \'%s\'' % question_type)
        except KeyboardInterrupt as exc:
            # if raise_kbi:
            #     raise exc from None
            # if kbi_msg:
            #     print('')
            #     print(kbi_msg)
            #     print('')
            return {}
    return answers


# TODO:
# Bottom Bar - inquirer.ui.BottomBar
